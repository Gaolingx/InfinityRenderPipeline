#pragma kernel Main

float4 TAA_Resolution;
float4 TAA_BlendParameter;// x: static, y: dynamic, z: motion amplification, w: temporalScale
Texture2D SRV_DepthTexture;
Texture2D SRV_MotionTexture;
Texture2D SRV_HistoryTexture;
Texture2D SRV_AliasingTexture;
RWTexture2D<float4> UAV_AccmulateTexture;

static const int2 SampleOffsets[9] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1) };

#include "../../../../Shader/Include/Common.hlsl"
#include "../../../../Shader/Include/ShaderVariable.hlsl"

float4 ClipAABB(float4 prevData, float4 aabbMin, float4 aabbMax)
{
    float4 p_clip = 0.5 * (aabbMax + aabbMin);
    float4 e_clip = 0.5 * (aabbMax - aabbMin);

    float4 v_clip = prevData - p_clip;
    float4 v_unit = v_clip / e_clip;
    float4 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    [branch]
    if (ma_unit > 1) {
        return p_clip + v_clip / ma_unit;
    } else {
        return prevData;
    }
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;
    float2 unJitterUV = screenUV - TAAJitter.xy;
	uint2 pixelCoord = uint2(screenUV.xy * TAA_Resolution.xy);

    float2 velocity = SRV_MotionTexture.SampleLevel(Global_point_clamp_sampler, screenUV, 0).xy;
    float velocityLength = length(velocity);

    float totalWeight = 0;
    float sampleWeights[9];
    float4 sampleColors[9];

    [unroll]
    for(uint i = 0; i < 9; ++i) 
    {
        sampleColors[i] = SRV_AliasingTexture.SampleLevel(Global_point_clamp_sampler, unJitterUV + (SampleOffsets[i] * TAA_Resolution.zw), 0);
    }

    #if 0
        [unroll]
        for(uint j = 0; j < 9; ++j) 
        {
            sampleWeights[j] = HdrWeight4(sampleColors[j], 5);
        }

        [unroll]
        for(uint k = 0; k < 9; ++k) 
        {
            totalWeight += sampleWeights[k];
        }  
        sampleColors[4] = (sampleColors[0] * sampleWeights[0] + sampleColors[1] * sampleWeights[1] + sampleColors[2] * sampleWeights[2] +  sampleColors[3] * sampleWeights[3] + sampleColors[4] * sampleWeights[4] + sampleColors[5] * sampleWeights[5] +  sampleColors[6] * sampleWeights[6] + sampleColors[7] * sampleWeights[7] + sampleColors[8] * sampleWeights[8]) / totalWeight;
    #endif

    float4 m1 = 0; 
    float4 m2 = 0;

    [unroll]
    for(uint x = 0; x < 9; ++x) 
    {
        m1 += sampleColors[x];
        m2 += sampleColors[x] * sampleColors[x];
    }

    float4 mean = m1 / 9;
    float4 stddev = sqrt((m2 / 9) - pow2(mean));

    float4 minColor = mean - TAA_BlendParameter.w * stddev;
    float4 maxColor = mean + TAA_BlendParameter.w * stddev;

    float4 currColor = sampleColors[4];
    minColor = min(minColor, currColor);
    maxColor = max(maxColor, currColor);
    
    float4 prevColor = SRV_HistoryTexture.SampleLevel(Global_point_clamp_sampler, screenUV - velocity, 0);
    prevColor = ClipAABB(prevColor, minColor, maxColor);

    float weight = clamp(lerp(TAA_BlendParameter.x, TAA_BlendParameter.y, velocityLength * TAA_BlendParameter.z), TAA_BlendParameter.y, TAA_BlendParameter.x);
    UAV_AccmulateTexture[id.xy] = lerp(currColor, prevColor, weight);
}
