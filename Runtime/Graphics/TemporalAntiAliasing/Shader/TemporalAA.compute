#pragma kernel Main

float4 TAA_Resolution;
float4 TAA_BlendParameter; // x: static, y: dynamic, z: motion amplification, w: temporalScale
Texture2D SRV_DepthTexture;
Texture2D SRV_MotionTexture;
Texture2D SRV_HistoryDepthTexture;
Texture2D SRV_HistoryColorTexture;
Texture2D SRV_AliasingColorTexture;
RWTexture2D<float4> UAV_AccmulateColorTexture;

static const half TONEMAP_EPSILON = 1.0f / 65530.0f;
static const int2 SampleOffsets[9] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1) };
static const int2 NeighborOffsets[8] = { int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(1, 1), int2(1, 0), int2(-1, 1), int2(0, -1) };

#include "../../../../Shaders/ShaderLibrary/Common.hlsl"
#include "../../../../Shaders/ShaderLibrary/ShaderVariables.hlsl"

float3 ClipAABB(float3 color, float3 aabbMin, float3 aabbMax)
{
#if 0
    // Note: only clips towards aabb center (but fast!)
    float3 center = 0.5 * (aabbMax + aabbMin);
    float3 extents = 0.5 * (aabbMax - aabbMin);

    // This is actually `distance`, however the keyword is reserved
    float3 offset = color - center;

    float3 ts = abs(offset / extents);
    float t = max3(ts.x, ts.y, ts.z);

    return t > 1 ? center + offset / t : color;
#else
    // Note: only clips towards aabb center (but fast!)
    float3 center = 0.5 * (aabbMax + aabbMin);
    float3 extents = 0.5 * (aabbMax - aabbMin);

    // This is actually `distance`, however the keyword is reserved
    float3 offset = color - center;

    float3 ts = abs(extents / (offset + 0.0001));
    float t = saturate(min3(ts.x, ts.y, ts.z));
    return center + offset * t;
#endif
}

#if 1 //defined(UNITY_REVERSED_Z)
    #define COMPARE_DEPTH(a, b) step(b, a)
#else
    #define COMPARE_DEPTH(a, b) step(a, b)
#endif

float3 Tonemap(float3 fRgb)
{
    return fRgb / (max(max(0.f, fRgb.r), max(fRgb.g, fRgb.b)) + 1.f).xxx;
}

float3 InverseTonemap(float3 fRgb)
{
    return fRgb / max(TONEMAP_EPSILON, 1.f - max(fRgb.r, max(fRgb.g, fRgb.b))).xxx;
}

float2 GetClosestFragment(float2 uv, float currDepth)
{
    float neighborhood[9];
    [unroll]
    for(uint i = 0; i < 8; ++i) 
    {
        neighborhood[i] = SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0, NeighborOffsets[i]).r;
    }

    float3 result = currDepth;

    [unroll]
    for(uint j = 0; j < 8; ++j) 
    {
        result = lerp(result, float3(NeighborOffsets[j], neighborhood[j]), COMPARE_DEPTH(neighborhood[j], result.z));
    }

    return (uv + result.xy * TAA_Resolution.zw);
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;
    float2 unJitterUV = screenUV - TAAJitter.xy;

    float currDepth = SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, screenUV, 0).r;
    float2 velocity = SRV_MotionTexture.SampleLevel(Global_bilinear_clamp_sampler, GetClosestFragment(screenUV, currDepth), 0).xy;
    //float lastDepth = SRV_HistoryDepthTexture.SampleLevel(Global_point_clamp_sampler, screenUV, 0).r;
    //float3 lastColor = SRV_HistoryColorTexture.SampleLevel(Global_bilinear_clamp_sampler, screenUV - velocity, 0).rgb;
    float3 lastColor = Texture2DSampleBicubic(SRV_HistoryColorTexture, Global_bilinear_clamp_sampler, screenUV - velocity, TAA_Resolution.xy, TAA_Resolution.zw).rgb;
    lastColor = RGB2YCoCg(Tonemap(lastColor));

    float3 sampleColors[9];

    [unroll]
    for(uint i = 0; i < 9; ++i) 
    {
        sampleColors[i] = SRV_AliasingColorTexture.SampleLevel(Global_bilinear_clamp_sampler, unJitterUV, 0, SampleOffsets[i]).rgb;
        sampleColors[i] = RGB2YCoCg(Tonemap(sampleColors[i]));
    }

#if 0
    float totalWeight = 0;
    float sampleWeights[9];

    [unroll]
    for(uint j = 0; j < 9; ++j) 
    {
        sampleWeights[j] = HdrWeightY(Luma4(sampleColors[j].rgb), 10);
        totalWeight += sampleWeights[j];
    }
    sampleColors[4] = (sampleColors[0] * sampleWeights[0] + 
                        sampleColors[1] * sampleWeights[1] + 
                        sampleColors[2] * sampleWeights[2] +  
                        sampleColors[3] * sampleWeights[3] + 
                        sampleColors[4] * sampleWeights[4] + 
                        sampleColors[5] * sampleWeights[5] +  
                        sampleColors[6] * sampleWeights[6] + 
                        sampleColors[7] * sampleWeights[7] + 
                        sampleColors[8] * sampleWeights[8]) / totalWeight;
#endif

    float3 m1 = 0; 
    float3 m2 = 0;

    [unroll]
    for(uint x = 0; x < 9; ++x) 
    {
        m1 += sampleColors[x];
        m2 += sampleColors[x] * sampleColors[x];
    }

    float3 mean = m1 / 9;
    float3 stddev = sqrt((m2 / 9) - pow2(mean));

    //TAA_BlendParameter.w *= (((currDepth - lastDepth) * 10) > 0.001) ? 0 : 1;
    float3 minColor = mean - TAA_BlendParameter.w * stddev;
    float3 maxColor = mean + TAA_BlendParameter.w * stddev;

    float3 currColor = sampleColors[4];
    minColor = min(minColor, currColor);
    maxColor = max(maxColor, currColor);
    
    float3 corners = ((sampleColors[0] + sampleColors[8] + sampleColors[2] + sampleColors[6]) - currColor) * 2;
    
    // Sharpen output
    currColor += (currColor - (corners * 0.167)) * 2.718 * 0.25; //0.25 is sharpness
    currColor = clamp(currColor, 0.0, 65472);
    
    lastColor = ClipAABB(lastColor, minColor, maxColor);

    float weight = clamp(lerp(TAA_BlendParameter.x, TAA_BlendParameter.y, length(velocity) * TAA_BlendParameter.z), TAA_BlendParameter.y, TAA_BlendParameter.x);
    UAV_AccmulateColorTexture[id.xy] = float4(clamp(InverseTonemap(YCoCg2RGB(lerp(currColor, lastColor, weight))), 0.0, 65472), 1.0);
}

/*float2 GetClosestFragment(float2 uv)
{
    const float4 neighborhood = float4(
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(-1, -1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(1, -1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(-1, 1)).r,
        SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0,  int2(1, 1)).r
    );

    float3 result = float3(0.0, 0.0, SRV_DepthTexture.SampleLevel(Global_point_clamp_sampler, uv, 0).r);
    result = lerp(result, float3(-1.0, -1.0, neighborhood.x), COMPARE_DEPTH(neighborhood.x, result.z));
    result = lerp(result, float3( 1.0, -1.0, neighborhood.y), COMPARE_DEPTH(neighborhood.y, result.z));
    result = lerp(result, float3(-1.0,  1.0, neighborhood.z), COMPARE_DEPTH(neighborhood.z, result.z));
    result = lerp(result, float3( 1.0,  1.0, neighborhood.w), COMPARE_DEPTH(neighborhood.w, result.z));

    return (uv + result.xy * TAA_Resolution.zw);
}

[numthreads(16, 16, 1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;
    float2 unJitterUV = screenUV - TAAJitter.xy;

    float3 color = SRV_AliasingColorTexture.SampleLevel(Global_bilinear_clamp_sampler, unJitterUV, 0).rgb;
    float2 motion = SRV_MotionTexture.SampleLevel(Global_bilinear_clamp_sampler, GetClosestFragment(screenUV), 0).xy;

    float3 topLeft = SRV_AliasingColorTexture.SampleLevel(Global_bilinear_clamp_sampler, unJitterUV, 0, int2(-1, -1)).rgb;
    float3 bottomRight = SRV_AliasingColorTexture.SampleLevel(Global_bilinear_clamp_sampler, unJitterUV, 0, int2(1, 1)).rgb;

    float3 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    // Sharpen output
    color += (color - (corners * 0.166667)) * 2.718282 * 0.25;
    color = clamp(color, 0.0, 65536);

    // Tonemap color and history samples
    float3 average = (corners + color) * 0.142857;

    float3 history = SRV_HistoryColorTexture.SampleLevel(Global_bilinear_clamp_sampler, screenUV - motion, 0).rgb;

    float motionLength = length(motion);
    float2 luma = float2(ColorLuminance(average), ColorLuminance(color));
    //float nudge = 4.0 * abs(luma.x - luma.y);
    float nudge = lerp(4.0, 0.25, saturate(motionLength * 100.0)) * abs(luma.x - luma.y);

    float3 minimum = min(bottomRight, topLeft) - nudge;
    float3 maximum = max(topLeft, bottomRight) + nudge;

    // Clip history samples
    history = ClipAABB(history, minimum, maximum);

    // Blend method
    float weight = clamp(lerp(TAA_BlendParameter.x, TAA_BlendParameter.y, motionLength * TAA_BlendParameter.z), TAA_BlendParameter.y, TAA_BlendParameter.x);
    UAV_AccmulateColorTexture[id.xy] = float4(clamp(lerp(color, history, weight), 0, 65472), 1.0);
}*/
